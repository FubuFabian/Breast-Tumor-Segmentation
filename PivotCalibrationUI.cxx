// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "PivotCalibrationUI.h"
#include <QWidget>
#include "PivotCalibration.h"
#include <FL/Fl_File_Chooser.H>

Fl_Menu_Item PivotCalibrationUI::menu_m_comPortChoice[] = {
 {"COM1", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"COM2", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"COM3", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"COM4", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"COM5", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"COM6", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"COM7", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"COM8", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void PivotCalibrationUI::cb__i(Fl_Button*, void*) {
  QString qtRomFile = QFileDialog::getOpenFileName(
                this, tr("Choose File to Save Calibration"), QDir::currentPath()
                ,tr("Rom (*.rom)"));

QByteArray byteArray = qtRomFile.toUtf8();
const char* romFile = byteArray.constData();

this->m_SROMFileNameTextField->value(romFile);

               

//char *fileName = fl_file_chooser("Load SROM File", "SROM Files(*.rom,*.ROM)",NULL,0);
//if(fileName!=NULL) { //file name is copied to the text field
//  this->m_SROMFileNameTextField->value(fileName);
//};
}
void PivotCalibrationUI::cb_(Fl_Button* o, void* v) {
  ((PivotCalibrationUI*)(o->parent()->parent()->user_data()))->cb__i(o,v);
}

void PivotCalibrationUI::cb_m_initializeButton_i(Fl_Button*, void*) {
  this->InitializeTrackingAndCalibration();
}
void PivotCalibrationUI::cb_m_initializeButton(Fl_Button* o, void* v) {
  ((PivotCalibrationUI*)(o->parent()->parent()->user_data()))->cb_m_initializeButton_i(o,v);
}

Fl_Menu_Item PivotCalibrationUI::menu_m_toolPortChoice[] = {
 {"Wireless", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"1", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"2", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"3", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"4", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"5", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"6", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"7", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"8", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"9", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"10", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"11", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"12", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void PivotCalibrationUI::cb_m_saveButton_i(Fl_Button*, void*) {
  this->SaveCalibration();
}
void PivotCalibrationUI::cb_m_saveButton(Fl_Button* o, void* v) {
  ((PivotCalibrationUI*)(o->parent()->parent()->user_data()))->cb_m_saveButton_i(o,v);
}

PivotCalibrationUI::PivotCalibrationUI() {
  { m_mainWindow = new Fl_Double_Window(412, 518, "Pivot Calibration ");
    m_mainWindow->color((Fl_Color)53);
    m_mainWindow->labelsize(11);
    m_mainWindow->user_data((void*)(this));
    m_mainWindow->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    { Fl_Group* o = new Fl_Group(7, 8, 396, 152);
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)53);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { m_comPortChoice = new Fl_Choice(85, 16, 90, 25, "COM Port:");
        m_comPortChoice->tooltip("The COM port used by the tracker");
        m_comPortChoice->box(FL_GTK_UP_BOX);
        m_comPortChoice->down_box(FL_UP_BOX);
        m_comPortChoice->color(FL_LIGHT2);
        m_comPortChoice->selection_color(FL_DARK1);
        m_comPortChoice->labelsize(12);
        m_comPortChoice->textsize(11);
        m_comPortChoice->when(FL_WHEN_CHANGED);
        m_comPortChoice->menu(menu_m_comPortChoice);
      } // Fl_Choice* m_comPortChoice
      { Fl_Button* o = new Fl_Button(359, 85, 35, 25, "...");
        o->box(FL_GTK_UP_BOX);
        o->color(FL_LIGHT2);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_);
      } // Fl_Button* o
      { m_SROMFileNameTextField = new Fl_Input(145, 85, 205, 25, "Optional SROM File:");
        m_SROMFileNameTextField->box(FL_BORDER_BOX);
        m_SROMFileNameTextField->labelsize(12);
        m_SROMFileNameTextField->textsize(11);
      } // Fl_Input* m_SROMFileNameTextField
      { m_initializeButton = new Fl_Button(120, 125, 65, 28, "Initialize");
        m_initializeButton->box(FL_GTK_UP_BOX);
        m_initializeButton->color(FL_LIGHT2);
        m_initializeButton->labelsize(11);
        m_initializeButton->callback((Fl_Callback*)cb_m_initializeButton);
      } // Fl_Button* m_initializeButton
      { m_delaySlider = new Fl_Value_Slider(93, 52, 87, 18, "Delay [sec]:");
        m_delaySlider->tooltip("Delay before starting data acquisition");
        m_delaySlider->type(1);
        m_delaySlider->color((Fl_Color)53);
        m_delaySlider->selection_color(FL_LIGHT3);
        m_delaySlider->labelsize(12);
        m_delaySlider->maximum(30);
        m_delaySlider->step(1);
        m_delaySlider->value(5);
        m_delaySlider->textsize(11);
        m_delaySlider->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* m_delaySlider
      { m_numberOfFramesSlider = new Fl_Value_Slider(295, 52, 87, 18, "# of frames:");
        m_numberOfFramesSlider->tooltip("Number of frames (transformations) to acquire");
        m_numberOfFramesSlider->type(1);
        m_numberOfFramesSlider->color(FL_LIGHT2);
        m_numberOfFramesSlider->labelsize(12);
        m_numberOfFramesSlider->minimum(300);
        m_numberOfFramesSlider->maximum(1800);
        m_numberOfFramesSlider->step(1);
        m_numberOfFramesSlider->value(300);
        m_numberOfFramesSlider->textsize(11);
        m_numberOfFramesSlider->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* m_numberOfFramesSlider
      { m_toolPortChoice = new Fl_Choice(292, 18, 95, 22, "Tool port:");
        m_toolPortChoice->box(FL_GTK_UP_BOX);
        m_toolPortChoice->down_box(FL_UP_BOX);
        m_toolPortChoice->color(FL_LIGHT2);
        m_toolPortChoice->selection_color(FL_DARK1);
        m_toolPortChoice->labelsize(12);
        m_toolPortChoice->textsize(11);
        m_toolPortChoice->menu(menu_m_toolPortChoice);
      } // Fl_Choice* m_toolPortChoice
      { m_saveButton = new Fl_Button(225, 124, 65, 28, "Save");
        m_saveButton->box(FL_GTK_UP_BOX);
        m_saveButton->color(FL_LIGHT2);
        m_saveButton->labelsize(11);
        m_saveButton->callback((Fl_Callback*)cb_m_saveButton);
        m_saveButton->deactivate();
      } // Fl_Button* m_saveButton
      o->end();
    } // Fl_Group* o
    { m_pivotCalibrationFLTKWidget = new igstk::PivotCalibrationFLTKWidget(7, 180, 396, 320, "Pivot Calibration Data");
      m_pivotCalibrationFLTKWidget->box(FL_ROUNDED_FRAME);
      m_pivotCalibrationFLTKWidget->color(FL_LIGHT2);
      m_pivotCalibrationFLTKWidget->selection_color(FL_BACKGROUND_COLOR);
      m_pivotCalibrationFLTKWidget->labeltype(FL_NORMAL_LABEL);
      m_pivotCalibrationFLTKWidget->labelfont(0);
      m_pivotCalibrationFLTKWidget->labelsize(14);
      m_pivotCalibrationFLTKWidget->labelcolor(FL_FOREGROUND_COLOR);
      m_pivotCalibrationFLTKWidget->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      m_pivotCalibrationFLTKWidget->when(FL_WHEN_RELEASE);
    } // igstk::PivotCalibrationFLTKWidget* m_pivotCalibrationFLTKWidget
    m_mainWindow->end();
  } // Fl_Double_Window* m_mainWindow
}

PivotCalibrationUI::~PivotCalibrationUI() {
  delete m_mainWindow;
}

void PivotCalibrationUI::SaveCalibration() {
  this->pivotCalibration->SaveCalibration();
}

void PivotCalibrationUI::InitializeTrackingAndCalibration() {
  this->pivotCalibration->InitializeTrackingAndCalibration();
}

void PivotCalibrationUI::Show() {
  this->m_mainWindow->show();
  this->hasQuitted = false;
}

bool PivotCalibrationUI::HasQuitted() {
  return this->hasQuitted;
}

void PivotCalibrationUI::Quit() {
  int i = fl_choice("Are you sure you want to quit?", NULL,"Yes","No"); 
  if ( i == 1 )
    {
    m_mainWindow->hide();
    this->hasQuitted = true;
    }
  else
    {
    return;
    }
}

void PivotCalibrationUI::SetCalibrator(PivotCalibration* calibrator) {
  this->pivotCalibration = calibrator;
}
